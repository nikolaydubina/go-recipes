header:
  content_url: header.md
contents:
  title: Contents
entry:
  title_prefix: ➡
  back: ⏫
  requirements:
    title: Requirements
  example:
    title: Example
groups:
  - title: Testing
    entries:
      - title: Make treemap of code coverage
        description: Visualize distribution of code coverage in your project. This helps to identify code areas with high and low coverage. Useful when you have large project with lots of files and packages. This 2D image-hash of your project should be more representative than a single number. Also available at https://go-cover-treemap.io.
        example_image_url: ./img/hugo-code-coverage.svg
        requirements:
          - go install github.com/nikolaydubina/go-cover-treemap@latest
        author: https://github.com/nikolaydubina
        commands:
          - go test -coverprofile cover.out ./...
          - go-cover-treemap -coverprofile cover.out > out.svg
      - title: Browse code coverage by file
        description: This is very helpful tool from the official Go toolchain. Similar visualization is integrated into VSCode and Goland, but can be used separately.
        example_image_url: ./img/tool-cover-html.png
        commands:
          - go test -coverprofile cover.out ./...
          - go tool cover -html=cover.out
      - title: Browse code coverage of Go code in terminal
        description: Interactively browse Go code coverage similarly to HTML provided by official Go toolchain, but in terminal.
        author: https://github.com/orlangure
        example_image_url: img/gocovsh.png
        commands:
          - go test -cover -coverprofile coverage.out
          - gocovsh
          - gocovsh --profile profile.out  # for other coverage profile names
          - git diff --name-only | gocovsh # only show changed files
        requirements:
          - go install github.com/orlangure/gocovsh@latest
      - title: Pretty print coverage of Go code in terminal
        description: It is similar to `go tool cover -html=cover.out` but in terminal. You can filter by functions, packages, minimum coverage, and more.
        author: https://github.com/nikandfor
        commands:
          - cover
        requirements:
          - go install github.com/nikandfor/cover@latest
        example_image_url: img/cover.png
      - title: Make histogram of Go files per package
        description: Find when package is too big or too small. Adjust histogram length to maximum value.
        requirements:
          - https://stedolan.github.io/jq/download/
        commands:
          - go list -json ./... | jq -rc '[.ImportPath, (.GoFiles | length | tostring)] | join(" ")' | perl -lane 'print (" " x (20 - $F[1]), "=" x $F[1], " ", $F[1], "\t", $F[0])'
        example_output_url: source/histogram-files-pkg.md
      - title: Run tests sequentially
        description: Use when you need to synchronize tests, for example in integration tests that share environment. [Official documentation](https://pkg.go.dev/cmd/go#hdr-Testing_flags).
        commands:
          - go test -p 1 -parallel 1 ./...
      - title: Run tests in parallel
        description: Add `t.Parallel` to your tests case function bodies. As per documentation, by default `-p=GOMAXPROCS` and `-parallel=GOMAXPROCS` when you run `go test`. Different packages by default run in parallel, and tests within package can be enforced to run in parallel too. Make sure to copy test case data to new variable, why explained [here](https://gist.github.com/posener/92a55c4cd441fc5e5e85f27bca008721). [Official documentation](https://pkg.go.dev/cmd/go#hdr-Testing_flags).
        example_content_url: source/run-tests-parallel.go
      - title: Detect goroutine leaks
        description: Refactored, tested variant of the goroutine leak detector found in both `net/http` tests and the cockroachdb source tree. You have to call this library in your tests.
        author: https://github.com/fortytw2
        source: https://github.com/fortytw2/leaktest
        example_content_url: source/leaktest.go
      - title: Run tests with pretty output
        description: This wrapper around `go test` renders test output in easy to read format. Also supports JUnit, JSON output, skipping slow tests, running custom binary.
        author: https://github.com/dnephin
        commands:
          - gotestsum --format dots
        example_image_url: https://user-images.githubusercontent.com/442180/182284939-e08a0aa5-4504-4e30-9e88-207ef47f4537.gif
        source: https://github.com/gotestyourself/gotestsum
        requirements:
          - go install gotest.tools/gotestsum@latest
      - title: Enrich `go test` output
        description: Add colors and enrich `go test` output. It can be used in CI pipeline and has lots of options.
        author: https://github.com/kyoh86
        commands:
          - richgo test ./...
        example_image_url: https://asciinema.org/a/99810.png
        requirements:
          - go install github.com/kyoh86/richgo@latest
      - title: Get packages without tests
        description: If code coverage does not report packages without tests. For example for CI or quality control.
        requirements:
          - https://stedolan.github.io/jq/download/
        author: https://github.com/nikolaydubina
        commands:
          - go list -json ./... | jq -rc 'select((.TestGoFiles | length)==0) | .ImportPath'
        example_output_url: source/pkg-without-tests.md
  - title: Dependencies
    entries:
      - title: Get Go version of current module
        description: For example, setup correct Go version automatically from `go.mod` in CI.
        requirements:
          - https://stedolan.github.io/jq/download/
        commands:
          - go mod edit -json | jq -r .Go
        example-output: 1.16
      - title: Get Go versions of upstream modules
        description: Use this when upgrading version of Go or finding old modules.
        requirements:
          - https://stedolan.github.io/jq/download/
        commands:
          - go list -deps -json ./... | jq -rc 'select(.Standard!=true and .Module.GoVersion!=null) | [.Module.GoVersion,.Module.Path] | join(" ")' | sort -V | uniq
        example_output_url: source/go-ver-upstream-mods.md
      - title: Get directly dependent modules that can be upgraded
        description: Keep your modules updated. Similar function is integrated in VSCode official Go plugin and GoLand.
        commands:
          - go list -u -m $(go list -m -f '{{.Indirect}} {{.}}' all | grep '^false' | cut -d ' ' -f2) | grep '\['
        example_output_url: source/go-upstream-mods-to-update.md
      - title: Get upstream modules without Go version
        description: Find outdated modules or imports that you need to upgrade.
        commands:
          - go list -deps -json ./... | jq -rc 'select(.Standard!=true and .Module.GoVersion==null) | .Module.Path' | sort -u
        requirements:
          - https://stedolan.github.io/jq/download/
        example_output_url: source/go-upstram-mods-without-go-version.md
      - title: Get available module versions
        description: This works even if you did not download or install module locally. This is useful to check to which version you can upgrade to, what is the latest version, and whether there are v2+ major versions recognized by Go toolchain.
        commands:
          - go list -m -versions github.com/google/gofuzz
        example-output: github.com/google/gofuzz v1.0.0 v1.1.0 v1.2.0
      - title: Make graph of upstream modules
        description: For each module, the node representing the greatest version (i.e., the version chosen by Go's minimal version selection algorithm) is colored green. Other nodes, which aren't in the final build list, are colored grey.
        author: official Go team
        commands:
          - go mod graph | modgraphviz | dot -Tsvg -o mod-graph.svg
        example_image_url: ./img/modgraphviz-go-featureprocessing.svg
        requirements:
          - https://graphviz.org/download/
          - go install golang.org/x/exp/cmd/modgraphviz@latest
      - title: Make graph of upstream modules with `gmchart`
        description: Render in browser Go module graphs. Built with D3.js, Javascript, HTTP server in Go.
        author: https://github.com/PaulXu-cn
        commands:
          - go mod graph | gmchart
        example_image_url: https://github.com/PaulXu-cn/go-mod-graph-chart/raw/main/show.gif
        requirements:
          - go install github.com/PaulXu-cn/go-mod-graph-chart/gmchart@latest
      - title: Make graph of upstream packages
        description: Find unexpected dependencies or visualize project. Works best for small number of packages, for large projects use `grep` to narrow down subgraph. Without `-deps` only for current module.
        commands:
          - "go list -deps -json ./... | jq -c 'select(.Standard!=true) | {from: .ImportPath, to: .Imports[]}' | jsonl-graph | dot -Tsvg > package-graph.svg"
        example_image_url: ./img/packages-graph.svg
        author: https://github.com/nikolaydubina
        requirements:
          - https://stedolan.github.io/jq/download/
          - https://graphviz.org/download/
          - go install github.com/nikolaydubina/import-graph@latest
          - go install github.com/nikolaydubina/jsonl-graph@latest
      - title: Scrape details about upstream modules and make graph
        description: Find low quality or unmaintained dependencies.
        commands:
          - go mod graph | import-graph -i=gomod | jsonl-graph -color-scheme=file://$PWD/basic.json | dot -Tsvg > output.svg
        example_image_url: ./img/gin-mod-graph-collected.svg
        author: https://github.com/nikolaydubina
        requirements:
          - https://graphviz.org/download/
          - go install github.com/nikolaydubina/import-graph@latest
          - go install github.com/nikolaydubina/jsonl-graph@latest
      - title: Scrape licenses of upstream dependencies
        description: Collect all the licenses for checking if you can use the project, for example in proprietary or commercial environment.
        author: Google
        example_output_url: source/go-upstream-mods-licenses.md
        commands:
          - go-licenses csv github.com/gohugoio/hugo
        requirements:
          - go install github.com/google/go-licenses@latest
      - title: Explore upstream dependencies interactively
        description: Useful in large refactorings, dependency breaking, physical layout changes.
        author: "[Alan Donovan](https://github.com/adonovan), official Go team"
        example_image_url: https://github.com/adonovan/spaghetti/blob/main/screenshot.png
        requirements:
          - go install github.com/adonovan/spaghetti@latest
      - title: Use `go mod` directives
        description: Tell Go compiler which versions of upstreams to include in your build. Tell all users of your module how to deal with versions of your module.
        example_content_url: source/go-mod-directives.md
      - title: Analyze dependencies with `goda`
        description: This tool has extensive syntax for filtering dependencies graphs. It can work with packages and modules.
        author: "[Egon Elbre](egonelbre@gmail.com)"
        commands:
          - goda graph . | dot -Tsvg -o graph.svg
          - goda graph -cluster -short "github.com/nikolaydubina/go-cover-treemap:all" | dot -Tsvg -o graph.svg
        requirements:
          - https://graphviz.org/download/
          - go install github.com/loov/goda@latest
        example_image_url: https://github.com/loov/goda/raw/master/graph.svg
  - title: Code Visualization
    entries:
      - title: Make graph of function calls
        description: Visualize complex or new project quickly or to study project. Requires `main.go` in module. Supports Graphviz output format. Has many options for filtering and formatting.
        author: official Go team
        example_image_url: img/callgraph.svg
        commands:
          - callgraph -format graphviz . | dot -Tsvg -o graph.svg
          - "recommend: grep <package/class/func of interest>"
          - "recommend: grep -v Error since many packages report error"
          - "recommend: adding `rankdir=LR;` to graphviz file for denser graph"
          - "recommend: you would have to manually fix graphviz file first and last line"
        requirements:
          - go install golang.org/x/tools/cmd/callgraph@latest
      - title: Make graph of function calls in package
        description: Quickly track which packages current package is calling and why.
        author: https://github.com/ofabry
        commands:
          - go-callvis .
        example_image_url: https://raw.githubusercontent.com/ofabry/go-callvis/master/images/syncthing.png
        requirements:
          - go install github.com/ofabry/go-callvis
      - title: Make PlantUML diagram via `goplantuml`
        description: Generates class diagram in widely used format with the information on structs, interfaces and their relationships. Render `.puml` files in for example [planttext.com](https://www.planttext.com).
        author: https://github.com/jfeliu007
        commands:
          - goplantuml -recursive path/to/gofiles path/to/gofiles2
        requirements:
          - go get github.com/jfeliu007/goplantuml/parser
          - go install github.com/jfeliu007/goplantuml/cmd/goplantuml@latest
        example_image_url: https://raw.githubusercontent.com/jfeliu007/goplantuml/master/example/example.png
      - title: Make PlantUML diagram via `go-plantuml`
        description: Automatically generate visualization of classes and interfaces for go packages. Recommend recursive option. Render `.puml` files in for example [planttext.com](https://www.planttext.com).
        author: https://github.com/bykof
        commands:
          - go-plantuml generate -d . -r -o graph.puml
        example_image_url: https://raw.githubusercontent.com/bykof/go-plantuml/master/docs/assets/graph.svg
        requirements:
          - go install github.com/bykof/go-plantuml@latest
      - title: Make 3D chart of Go codebase
        description: Fresh artistic perspective on Go codebase. `GoCity` is an implementation of the Code City metaphor for visualizing source code - folders are districts; files are buildings; structs are buildings on the top of their files. This project has research paper "[GoCity Code City for Go](https://homepages.dcc.ufmg.br/~mtov/pub/2019-saner-gocity.pdf)" at SANER'19. Also available at [go-city.github.io](https://go-city.github.io).
        example_image_url: img/gocity.png
        author: https://github.com/rodrigo-brito
        requirements:
          - go install github.com/rodrigo-brito/gocity@latest
  - title: Static Analysis
    entries:
      - title: Run default static analysis with `go vet`
        description: Official tool for static analysis of Go programs, with 27+ static analyzers.
        author: official Go team
        commands:
          - go vet ./...
      - title: Run custom static analysis tool with `go vet`
        description: Standard `go vet` can be used to run custom analyzers binaries. Third party analyzers are supported. Lots of official analyzers not included by default into `go vet`. Analyzer has to satisfy interface and command described here https://pkg.go.dev/golang.org/x/tools/go/analysis. Refer for https://pkg.go.dev/golang.org/x/tools/go/analysis/passes for full list of official Go analyzers.
        author: official Go team
        commands:
          - go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow
          - go vet -vettool=$(which shadow)
      - title: Run official static analyzers not included in `go vet`
        description: There are many analyzers not included in `go vet`. These tools are experimental and may not work as expected (e.g. `usesgenerics` does not work). Refer to for full list https://pkg.go.dev/golang.org/x/tools/go/analysis.
        author: official Go team
        example_content_url: source/goanalysis/main.go
      - title: Detect usafe code with `go-safer`
        description: Find incorrect uses of `reflect.SliceHeader`, `reflect.StringHeader`, and unsafe casts between structs with architecture-sized fields. Reseach paper ["Uncovering the Hidden Dangers Finding Unsafe Go Code in the Wild"](https://arxiv.org/abs/2010.11242) presented at 19th IEEE International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom 2020).
        author: https://github.com/jlauinger
        commands:
          - go vet -vettool=$(which go-safer) ./...
        example_output_url: source/go-safer.txt
        requirements:
          - go install github.com/jlauinger/go-safer@latest
      - title: Calculate cognitive complexity with `gocognit`
        description: Congitive Complexity as defined in this tool can be more illustrative than Cyclometric Complexity. Research paper ["Cognitive Complexity - a new way of measuring understandability"](https://www.sonarsource.com/docs/CognitiveComplexity.pdf), 2021.
        author: https://github.com/uudashr
        commands:
          - gocognit .
        example_content_url: source/gocognit.txt
        example_output_url: source/gocognit.out
        requirements:
          - go install github.com/uudashr/gocognit/cmd/gocognit@latest
  - title: Code Generation
    entries:
      - title: Run `go:generate` in parallel
        description: Official Go team [encourages](https://github.com/golang/go/issues/20520) to run sequentially. However, in certain situations, such as lots of mocks, parallelization helps a lot, albeit, you should consider including your generated files in git. The solution bellow spawns multiple processes, each per pkg.
        commands:
          - grep -rnw "go:generate" -E -l "${1:-*.go}" . | xargs -L1 dirname | sort -u | xargs -P 8 -I{} go generate {}
      - title: Generate `String` method for enum types
        description: This is an official tool for generating `String` for enums. It supports overrides via comments.
        author: official Go team
        example_content_url: source/stringer/stringer.go
        requirements:
          - go install golang.org/x/tools/cmd/stringer@latest
  - title: Refactoring
    entries:
      - title: Replace symbol
        description: I found this in announcement [notice](https://github.com/golang/go/commit/2580d0e08d5e9f979b943758d3c49877fb2324cb) of Go 1.18 for changes to `interface{}` to `any`. This can be useful for other refactorings too.
        commands:
          - gofmt -w -r 'interface{} -> any' .
  - title: Errors
    entries:
      - title: Pretty print `panic` messages
        description: Read `panic` messages easier. Need to redirect STDERR to this tool with `panic` stack traces. The tool has HTML output and does lots of deduplication and enhancements. Refer to examples in original repo.
        commands:
          - go test -v |& pp
        example_image_url: https://raw.githubusercontent.com/wiki/maruel/panicparse/parse.gif
        requirements:
          - go install github.com/maruel/panicparse/v2/cmd/pp@latest
  - title: Build
    entries:
      - title: Show compiler optimization decisions on heap and inlining
        description: Building with `-m` flag will show decisions of compiler on inlining and heap escape. This can help you to validate your understanding of your code and optimize it.
        commands:
          - go build -gcflags="-m -m" . 2>&1 | grep inline
        example_output_url: source/compile-optimizations.md
      - title: Disable inlining
        description: Usually you may not need it, but can reduce binary size and even improve performance.
        commands:
          - go build -gcflags="-l" .
      - title: Aggressive inlining
        description: Usually you may not need it, but can improve performance. This includes mid-stack inlining.
        commands:
          - go build -gcflags="-l -l -l -l" .
      - title: Manually disable or enable `cgo`
        description: Disable `cgo` with `CGO_ENABLED=0` and enable with `CGO_ENABLED=1`. If you don't, `cgo` may end-up being enabled or code dynamically linked if, for example, you use some `net` or `os` packages. You may want to disable `cgo` to improve performance, since complier and runtime would have easier job optimizing code. This also should reduce your image size, as you can have alpine image with less shared libraries.
      - title: Include metadata in binary during compilation with `ldflags`
        description: You can pass metadata through compiler to your binary. This is useful for including things like git commit, database schema version, integrity hashes. Variables can only be strings.
        commands:
          - go build -v -ldflags="-X 'main.Version=v1.0.0'"
          - go build -v -ldflags="-X 'my/pkg/here.Variable=some-string'"
        example_content_url: source/ldflags-meta.go
      - title: Make treemap breakdown of Go executable binary
        description: Useful for studying Go compiler, large projects, projects with C/C++ and `cgo`, 3rd party dependencies, embedding. However, total size may not be something to worry about for your executable.
        author: https://github.com/nikolaydubina
        commands:
          - go tool nm -size <binary finename> | go-binsize-treemap > binsize.svg
        example_image_url: https://github.com/nikolaydubina/go-binsize-treemap/blob/main/docs/hugo.svg
        requirements:
          - go install github.com/nikolaydubina/go-binsize-treemap@latest
  - title: Assembly
    entries:
      - title: Get assembly of Go code snippets online
        description: Use [godbolt.org](https://godbolt.org) to compile and see assembly of short Go code. You can check different platforms and compilers including `cgo`. This tool is commonly used by C++ community.
        example_image_url: ./img/godbolt.png
        author: https://github.com/mattgodbolt
      - title: Get Go compiler SSA intermediary representation
        description: Check what does Go compiler do. Might be useful if you trying to optimize some code or learn more about compiler. https://golang.design/gossa.
        source: https://github.com/golang-design/ssaplayground
        example_image_url: https://github.com/golang-design/ssaplayground/blob/main/public/assets/screen.png
        author: https://github.com/changkun
      - title: View Go assembly interactively
        description: Understand how Go is compiled better.
        author: https://github.com/egonelbre
        example_image_url: https://github.com/loov/lensm/raw/main/screenshot.gif
        requirements:
          - go install loov.dev/lensm@main
        source: https://github.com/loov/lensm
      - title: Generate Go assembly in Go
        description: Write better quality Go assembly quicker in Go language itself. This tool conveniently generates stub for Go code to call your generated assembly. Used by Go core.
        author: https://github.com/mmcloughlin
        source: https://github.com/mmcloughlin/avo
        example_content_url: source/avo.go
      - title: Generate AST for code snippets
        description: Access Go core AST mechanism to generate AST.
        example_content_url: source/ast/ex1.go
        example_output_url: source/ast/ex1.out
  - title: Execution
    entries:
      - title: Run Go function in shell
        description: Run Go one-liners. This tool will print to stdout the return of a function call.
        author: https://github.com/natefinch
        requirements:
          - go install github.com/natefinch/gorram@latest
        commands:
          - cat README.md | gorram crypto/sha1 Sum
          - echo 12345 | gorram encoding/base64 StdEncoding.EncodeToString
          - gorram net/http Get https://google.com
      - title: Run simple fileserver
        description: It takes one line to run HTTP file server in Go. Akin to famous oneliner in Python `python3 -m http.server` and `python -m SimpleHTTPServer`. Run this file as usually `go run <filename>`.
        example_image_url: ./img/simple-fs.png
        example_content_url: source/go-simple-webserver.go
      - title: Monitor Go processes
        description: Monitoring memory of Go processes, forcing GC, getting version of Go of processes.
        author: Google
        requirements:
          - go install github.com/google/gops@latest
        commands:
          - gops
        example_output_url: source/gops.md
      - title: Create 3D visualization of concurrency traces
        description: Fresh artistic perspective on coroutines execution. There is no advanced functions and it is hard to analyze production systems. However, it could be interesting for educational purposes.
        author: https://github.com/divan
        example_image_url: https://github.com/divan/gotrace/blob/master/images/demo.png
        requirements:
          - go install github.com/divan/gotrace@latest
          - patch Go compiler, available via Docker
          - more instructions in original repo
  - title: Monitoring
    entries:
      - title: Auto-Instrument all functions with `go-instrument`
        description: Automatically instrument all functions with Open Telemetry Spans by code generation. Inserts errors into Spans.
        author: https://github.com/nikolaydubina
        example_image_url: https://github.com/nikolaydubina/go-instrument/raw/master/docs/fib-error.png?raw=true
        commands:
          - find . -name "*.go" | xargs -I{} go-instrument -app my-service -w -filename {}
        requirements:
          - go install github.com/nikolaydubina/go-instrument@latest
      - title: Auto-Instrument all functions with `otelinji`
        description: Automatically instrument all functions with Open Telemetry Spans by code generation. Inserts errors into Spans. Supports custom templates and can be used for Open Tracing or any custom insertions.
        author: https://github.com/hedhyw
        example_image_url: https://github.com/hedhyw/otelinji/blob/main/assets/diff.png?raw=true
        commands:
          - otelinji -w -filename input_file.go
          - otelinji -filename input_file.go > input_file.go
          - find . -name "*.go" | grep -v "vendor/\|.git/\|_test.go" | xargs -n 1 -t otelinji -w -filename
        requirements:
          - go install github.com/hedhyw/otelinji/cmd/otelinji@latest
  - title: Benchmarking
    entries:
      - title: Run benchmarks
        description: Start here. This is the standard tool for benchmarking. It can also do advanced features like mutex profiles. More flags are in Go [documentation](https://pkg.go.dev/cmd/go#hdr-Testing_flags) and `go help testflag`.
        commands:
          - go test -bench=. -benchmem -benchtime=10s ./...
        example_output_url: source/bench.txt
      - title: Table-driven benchmarks
        description: Similar to tests, Go supports table-driven benchmarks, which is very helpful for fine gradation of meta-parameters. More details in the Go [blog](https://go.dev/blog/subtests).
        example_content_url: source/bench_table.go
        example_output_url: source/bench_table.out
      - title: Generate benchmak CPU and Memory profiles
        description: This is useful for identifying most time or memory consuming parts. Recommended to run for single benchmark at a time and with `-count` or `-benchtime` for better accuracy.
        commands:
          - go test -bench=<my-benchmark-name> -cpuprofile cpu.out -memprofile mem.out ./...
      - title: Visualize callgraph of profiles wiht `pprof`
        description: Once you generate profiles, visualize them with `pprof`. Both memory and CPU profiles are supported. Many options are available. Refer to the link you get in SVG to how to interpret this graph. More official documentation [blog](https://go.dev/blog/pprof), [pkg-doc](https://pkg.go.dev/net/http/pprof).
        author: official Go team
        commands:
          - go tool pprof -svg cpu.out > cpu.svg
          - go tool pprof -svg mem.out > mem.svg
        example_image_url: img/pprof_callgraph_cpu.png
      - title: Visualize flamegraphs of profiles wiht `pprof`
        description: Latest versions of `pprof` can also render [Flamegraphs](https://www.brendangregg.com/flamegraphs.html) for profiles. Make sure you set `-http` to start webserver. Then it is available in "View > Graph" in at http://0.0.0.0:80.
        author: Google
        commands:
          - pprof -http=0.0.0.0:80 cpu.out
        example_image_url: img/pprof_flamegraph_cpu.png
        requirements:
          - go install github.com/google/pprof@latest
      - title: Visualize profiles online
        description: You can also visualize profiles with online tools are aloso available https://www.speedscope.app (cpu).
        example_image_url: img/speedscope_cpu_profile.png
      - title: Get delta between two benchmarks with `benchstat`
        description: This is standard way to compare two benchmark outputs. Names of benchmarks should be the same. Generate benchmarks as per usual. You would get multiple tables per dimension. If no output, then pass `-split="XYZ"`. If you do not see `delta`, then pass `-count=2` or more in benchmark generation. It is recommended to have alternative implementations in different packages, to keep benchmark names the same.
        author: official Go team
        commands:
          - benchstat -split="XYZ" old.txt new.txt
        example_output_url: source/benchstat_two.txt
        requirements:
          - go install golang.org/x/perf/cmd/benchstat@latest
      - title: Get summary of benchmarks with `benchstat`
        description: Compare multiple benchmarks. Names of benchmarks should be the same. Generate benchmarks as per usual. You would get multiple tables per dimension. If no output, then pass `-split="XYZ"`. It is recommended to have alternative implementations in different packages, to keep benchmark names the same.
        author: official Go team
        commands:
          - benchstat -split="XYZ" int.txt float32.txt fpmoney.txt
        example_output_url: source/benchstat_multiple.txt
        requirements:
          - go install golang.org/x/perf/cmd/benchstat@latest
      - title: Continuous benchmarking
        description: Track how benchmarks change in codebase over time. This is accomplished by running benchmarks for git commits, storing results, and visualizing difference. Running benchmarks can be in GitHub Actions or locally, storage can be in same repository `master` or dedicated branch, or standalone servers. It should be straightforward to setup this manually. Example of GitHub Action [spec](https://github.com/swaggest/rest/blob/master/.github/workflows/bench.yml) and [blog](https://dev.to/vearutop/continuous-benchmarking-with-go-and-github-actions-41ok) from [@vearutop](https://github.com/vearutop), and an example on how it produces a PR [comment](https://github.com/swaggest/rest/pull/88#issuecomment-1271540878).
        example_image_url: img/cont-bench-vearutop.png
      - title: Continuous benchmarking with `gobenchdata`
        description: This tool uses `go test -bench` data in GitHub. It runs benchmarks, and uploads it as GitHub Pages for visualization. It is available as GitHub Action [gobenchdata](https://github.com/marketplace/actions/continuous-benchmarking-for-go). This is useful to see benchmark trends.
        example_image_url: https://github.com/bobheadxi/gobenchdata/raw/main/.static/demo-chart.png
        source: https://github.com/bobheadxi/gobenchdata
        author: https://github.com/bobheadxi
        requirements:
          - go install go.bobheadxi.dev/gobenchdata@latest
      - title: Continuous benchmarking with `benchdiff`
        description: Automates comparing benchmarks with `benchstat` of two git references. It is available as GitHub Action [benchdiff](https://github.com/marketplace/actions/benchdiff) which runs `benchstat` of HEAD vs base branch. This is useful to see how benchmarks change with PRs in CI.
        author: https://github.com/WillAbides
        example_image_url: img/cont-bench-willabides.png
        requirements:
          - go install github.com/willabides/benchdiff/cmd/benchdiff
      - title: Continuous benchmarking with `cob`
        description: Automate comparing benchmarks with `benchstat` between `HEAD` and `HEAD^1`. It can be used to block CI pipelines if benchmarks deteriorate. It reports output as text in CLI. This cane be useful in CI or in local development.
        example_image_url: https://github.com/knqyf263/cob/raw/master/img/usage.png
        author: https://github.com/knqyf263
        requirements:
          - go install github.com/knqyf263/cob@latest
      - title: Generate live traces using `net/http/trace`
        description: This will add endpoints to your your server. If you don't have server running already in your process, you can start one. Then you can point `pprof` tool to this data. For production, hide this endpoint in separate port and path. More details in documentation [trace](https://pkg.go.dev/cmd/trace), [net/http/pprof](https://pkg.go.dev/net/http/pprof).
        example_content_url: source/net_http_pprof.go
        example_output_url: source/net_http_pprof_commands.txt
      - title: Generate traces using `go test`
        description: Produce a trace of execution of tests in pacakge.
        commands:
          - go test -trace trace.out .
      - title: View traces with `go tool trace`
        description: You can view traces interactively in browser with standard Go tooling. This web tool also shows network blocking profile, synchronization blocking profile, syscall blocking profile, scheduler latency profile.
        commands:
          - go tool trace trace.out
        example_image_url: img/go_tool_trace_web.png
      - title: Get wallclock traces
        description: This tool can be more illustrative of Go traces than standard Go traces.
        author: https://github.com/felixge
        example_output_url: source/fgtrace.go
        example_image_url: https://github.com/felixge/fgtrace/raw/main/assets/fgtrace-example.png
        source: https://github.com/felixge/fgtrace
      - title: Get on/off CPU profiles
        description: This tool can be more illustrative of Go profiles than standard Go profiling.
        author: https://github.com/felixge
        source: https://github.com/felixge/fgprof
        example_output_url: source/fgprof.go
        example_image_url: https://github.com/felixge/fgprof/raw/master/assets/fgprof_pprof.png
  - title: Documentation
    entries:
      - title: Make alternative documentation with golds
        description: It has additional information like implementations of interface; promoted methods. The tool has nice minimalistic aesthetics.
        source: https://github.com/go101/golds
        author: "[Tapir Liu](https://www.tapirgames.com)"
        commands:
          - golds ./...
        example_image_url: img/golds.png
        requirements:
          - go install go101.org/golds@latest
      - title: Read Go binary documentation in `man` format
        description: This tool fetches the repo's readme as a man page replacement.
        example_image_url: https://github.com/appliedgocode/goman/raw/master/goman.gif
        commands:
          - goman <mypackage>
        author: https://github.com/christophberger
        requirements:
          - go install github.com/appliedgocode/goman@latest
